[project]
name = "dreadnode"
version = "1.0.0-rc.0"
description = "Dreadnode SDK"
requires-python = ">=3.10,<3.13"

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools>=42", "wheel"]
build-backend = "poetry.core.masonry.api"

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]

[tool.coverage.run]
branch = true
source = ["scripts"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.sdist]
packages = ["src"]

[tool.mypy]
strict = true

[tool.poetry]
name = "dreadnode"
version = "0.1.4"
description = "Dreadnode SDK"
authors = ["Nick Landers <monoxgas@gmail.com>"]
repository = "https://github.com/dreadnode/sdk"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
pydantic = "^2.9.2"
httpx = "^0.28.0"
ruamel-yaml = "^0.18.6"
logfire = "^3.5.3"
python-ulid = "^3.0.0"
fast-depends = "^2.4.12"
coolname = "^2.2.0"
pandas = "^2.2.3"
pyarrow = "^19.0.1"
loguru = "^0.7.3"
fsspec = {extras = ["s3"], version = "^2025.3.0"}
pydub = "^0.25.1"
moviepy = "^2.1.2"

[tool.poetry.group.dev.dependencies]
mypy = "^1.8.0"
ruff = "^0.1.14"
pre-commit = "^3.8.0"
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
types-protobuf = "^5.29.1.20250208"
pandas-stubs = "^2.2.3.250308"
types-requests = "^2.32.0.20250306"

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.readme]
github_org = "dreadnode"
logo_url = "https://d1lppblt9t2x15.cloudfront.net/logos/5714928f3cdc09503751580cffbe8d02.png"
tagline = "with batteries included 🔋"
emoji = "🐍"

[tool.ruff]
target-version = "py310"
line-length = 100
extend-exclude = [
    "*.ipynb" # jupyter notebooks
]

[tool.ruff.lint]
select = [ "ALL" ]
ignore = [
    "E501",     # line too long (we make best effort)
    "TRY003",   # long messages in exception classes
    "EM",       # picky message construction for exceptions
    "C90",      # mccabe complexity
    "A002",     # shadowing built-in
    "D",        # docstrings
    "ANN",      # annotations (handled by mypy)
    "PLR0913",  # too many arguments
    "ERA001",   # commented out code
    "FIX002",   # contains todo, consider fixing
]

[tool.ruff.format]
skip-magic-trailing-comma = false