[project]
name = "dreadnode"
version = "1.13.4"
description = "Dreadnode SDK"
authors = [{ name = "Nick Landers", email = "monoxgas@gmail.com" }]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.10,<3.14"

dependencies = [
    "pydantic>=2.9.2,<3.0.0",
    "httpx>=0.28.0,<1.0.0",
    "logfire>=3.5.3,<=3.20.0",
    "python-ulid>=3.0.0,<4.0.0",
    "coolname>=2.2.0,<3.0.0",
    "pandas>=2.2.3,<3.0.0",
    "fsspec[s3]>=2023.1.0,<=2025.3.0",
    "cyclopts>=3.22.2,<4.0.0",
    "taskgroup>=0.2.2,<1.0.0",
    "rigging>=3.2.1,<4.0.0",
    "ipykernel[dev] (>=6.30.1,<7.0.0)",
    "ipywidgets[dev] (>=8.1.7,<9.0.0)",
    "optuna[optimization] (>=4.5.0,<5.0.0)",
    "markdown[dev] (>=3.8.2,<4.0.0)",
    "mkdocstrings-python[dev] (>=1.18.2,<2.0.0)",
    "markdownify[dev] (>=1.2.0,<2.0.0)",
    "networkx>=3.3,<4.0.0",
]

[project.optional-dependencies]
training = ["transformers>=4.41.0,<5.0.0", "sentence-transformers>=5.1.0,<6.0.0",]

multimodal = [
    "pillow>=11.2.1,<12.0.0",
    "soundfile>=0.13.1,<1.0.0",
    "moviepy>=2.1.2,<3.0.0",
]

text = [
    "rapidfuzz>=3.13.0,<4.0.0",
    "presidio-analyzer>=2.2.359,<3.0.0",
    "scikit-learn>=1.7.1,<2.0.0",
    "confusables>=1.2.0,<2.0.0",
    "art>=6.5,<7.0",
    "nltk>=3.9.1,<4.0.0",
    "textblob>=0.19.0,<1.0.0",
    "textstat>=0.7.10,<1.0.0",
]

all = ["dreadnode[training,multimodal,text]"]

dev = [
    "mypy>=1.8.0,<2.0.0",
    "ruff>=0.11.6,<1.0.0",
    "pre-commit>=4.0.0,<5.0.0",
    "pytest>=8.3.3,<9.0.0",
    "pytest-asyncio>=0.26.0,<1.0.0",
    "types-protobuf>=5.29.1.20250208",
    "pandas-stubs>=2.2.3.250308",
    "types-requests>=2.32.0.20250306",
    "typer>=0.15.2,<1.0.0",
    "datasets>=3.5.0,<4.0.0",
    "pyarrow>=19.0.1,<20.0.0",
    "markdown>=3.8.2,<4.0.0",
    "markdownify>=1.1.0,<2.0.0",
    "mkdocstrings-python>=1.16.12,<2.0.0",
    "ipykernel>=6.29.5,<7.0.0",
]

[project.scripts]
dreadnode = "dreadnode.__main__:run"
dn = "dreadnode.__main__:run"

[tool.poetry.plugins."pipx.run"]
dreadnode = 'dreadnode.__main__:run'

[project.urls]
Homepage = "https://github.com/dreadnode/sdk"
Repository = "https://github.com/dreadnode/sdk"
Documentation = "https://docs.dreadnode.io"

# Build

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["dreadnode"]

[tool.hatch.build.targets.sdist]
include = ["/dreadnode", "/tests", "/README.md", "/LICENSE"]

[tool.hatch.version]
path = "dreadnode/__init__.py"

# Dev

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.mypy]
strict = true
python_version = "3.10"
exclude = "tests"

[tool.ty.environment]
python-version = "3.10"

[tool.ty.src]
exclude = [".hooks", "tests"]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]

[tool.coverage.run]
branch = true
source = ["scripts"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.ruff]
target-version = "py310"
line-length = 100
extend-exclude = [
    "*.ipynb", # jupyter notebooks
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "E501",    # line too long (we make best effort)
    "TRY003",  # long messages in exception classes
    "EM",      # picky message construction for exceptions
    "C90",     # mccabe complexity
    "A002",    # shadowing built-in
    "D",       # docstrings
    "ANN",     # annotations (handled by mypy)
    "PLR0913", # too many arguments
    "ERA001",  # commented out code
    "FIX002",  # contains todo, consider fixing
    "COM812",  # disabled for formatting
    "ISC001",  # disabled for formatting
    "PLC0415",  # import should be at top-level (lazy imports)
    "FBT001",   # boolean positional argument (legitimate cases)  
    "FURB122",  # use f.writelines (minor optimization)
    "F401", # ignore imported but unused
]

[tool.ruff.format]
skip-magic-trailing-comma = false

[tool.ruff.lint.extend-per-file-ignores]
".hooks/**/*.py" = [
    "ARG001", # temporary for rigging decorators
    "T201",   # printing is fine for hooks
]
"tests/**/*.py" = [
    "INP001", # namespace not required for pytest
    "S101",   # asserts allowed in tests...
    "SLF001", # allow access to private members
]
